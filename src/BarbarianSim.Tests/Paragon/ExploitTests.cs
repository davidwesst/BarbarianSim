using BarbarianSim.Config;
using BarbarianSim.Enums;
using BarbarianSim.Events;
using BarbarianSim.Paragon;
using FluentAssertions;
using Xunit;

namespace BarbarianSim.Tests.Paragon;

public class ExploitTests
{
    private readonly SimulationState _state = new(new SimulationConfig());
    private readonly Exploit _paragon = new();

    public ExploitTests() => _state.Config.ParagonNodes.Add(ParagonNode.Exploit);

    [Fact]
    public void Creates_ExploitProcEvent()
    {
        var damageEvent = new DamageEvent(123, 500, DamageType.Physical, DamageSource.LungingStrike, SkillType.None, _state.Enemies.First());

        _paragon.ProcessEvent(damageEvent, _state);

        _state.Events.Should().ContainSingle(e => e is ExploitProcEvent);
        _state.Events.OfType<ExploitProcEvent>().Single().Timestamp.Should().Be(123);
        _state.Events.OfType<ExploitProcEvent>().Single().Target.Should().Be(_state.Enemies.First());
    }

    [Fact]
    public void Does_Nothing_If_Paragon_Not_Active()
    {
        _state.Config.ParagonNodes.Remove(ParagonNode.Exploit);
        var damageEvent = new DamageEvent(123, 500, DamageType.Physical, DamageSource.LungingStrike, SkillType.None, _state.Enemies.First());

        _paragon.ProcessEvent(damageEvent, _state);

        _state.Events.Should().NotContain(e => e is ExploitProcEvent);
    }

    [Fact]
    public void Does_Nothing_If_Within_20_Seconds_Of_Previous_Proc()
    {
        var previousProc = new ExploitProcEvent(104, _state.Enemies.First());
        _state.ProcessedEvents.Add(previousProc);

        var damageEvent = new DamageEvent(123, 500, DamageType.Physical, DamageSource.LungingStrike, SkillType.None, _state.Enemies.First());

        _paragon.ProcessEvent(damageEvent, _state);

        _state.Events.Should().NotContain(e => e is ExploitProcEvent);
    }

    [Fact]
    public void Procs_If_More_Than_20_Seconds_Since_Last_Proc()
    {
        var previousProc = new ExploitProcEvent(102, _state.Enemies.First());
        _state.ProcessedEvents.Add(previousProc);

        var damageEvent = new DamageEvent(123, 500, DamageType.Physical, DamageSource.LungingStrike, SkillType.None, _state.Enemies.First());

        _paragon.ProcessEvent(damageEvent, _state);

        _state.Events.Should().ContainSingle(e => e is ExploitProcEvent);
    }

    [Fact]
    public void Considers_Target_When_Searching_For_Last_Proc()
    {
        var config = new SimulationConfig();
        config.EnemySettings.NumberOfEnemies = 2;
        var state = new SimulationState(config);
        _state.Config.ParagonNodes.Add(ParagonNode.Warbringer);

        var previousProc = new ExploitProcEvent(102, _state.Enemies.Last());
        _state.ProcessedEvents.Add(previousProc);

        var damageEvent = new DamageEvent(123, 500, DamageType.Physical, DamageSource.LungingStrike, SkillType.None, _state.Enemies.First());

        _paragon.ProcessEvent(damageEvent, _state);

        _state.Events.Should().ContainSingle(e => e is ExploitProcEvent);
    }
}
