using BarbarianSim.Config;
using BarbarianSim.Enums;
using BarbarianSim.EventHandlers;
using BarbarianSim.Events;
using FluentAssertions;
using Moq;
using Xunit;

namespace BarbarianSim.Tests.EventHandlers;

public class ExploitProcEventHandlerTests
{
    private readonly Mock<SimLogger> _mockSimLogger = TestHelpers.CreateMock<SimLogger>();
    private readonly SimulationState _state = new SimulationState(new SimulationConfig());
    private readonly ExploitProcEventHandler _handler;

    public ExploitProcEventHandlerTests() => _handler = new(_mockSimLogger.Object);

    [Fact]
    public void Creates_AuraAppliedEvent()
    {
        var exploitProcEvent = new ExploitProcEvent(123.0, _state.Enemies.First());

        _handler.ProcessEvent(exploitProcEvent, _state);

        exploitProcEvent.VulnerableAuraAppliedEvent.Should().NotBeNull();
        _state.Events.Should().Contain(exploitProcEvent.VulnerableAuraAppliedEvent);
        exploitProcEvent.VulnerableAuraAppliedEvent.Timestamp.Should().Be(123);
        exploitProcEvent.VulnerableAuraAppliedEvent.Aura.Should().Be(Aura.Vulnerable);
        exploitProcEvent.VulnerableAuraAppliedEvent.Duration.Should().Be(3);
        exploitProcEvent.VulnerableAuraAppliedEvent.Target.Should().Be(_state.Enemies.First());
    }
}
